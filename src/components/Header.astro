<header class="mt-6 sticky top-6 flex justify-center z-20">
    <nav
        class="text-textColor bg-accentSecondary/80 backdrop-blur-sm rounded-full border border-accentPrimary border-opacity-70 shadow-xl flex justify-center items-center py-1 px-5 gap-3 font-medium text-sm md:text-md animated-section fade-in-bottom"
    >
        <a
            href="#proyectos"
            class="hover:text-primary cursor-pointer transition-colors nav-item"
            id="nav-proyectos">Proyectos</a
        >

        <a
            href="#habilidades"
            class="hover:text-primary cursor-pointer transition-colors nav-item"
            id="nav-habilidades">Habilidades</a
        >

        <a
            href="#sobre-mi"
            class="hover:text-primary cursor-pointer transition-colors nav-item"
            id="nav-sobre-mi">Sobre m√≠</a
        >

        <button id="theme-toggle"></button>
    </nav>
</header>

<style>
    .active {
        color: #4283c1;
    }
</style>

<script>
    const getThemePreference = (): string => {
        const theme = localStorage.getItem("theme");
        if (theme) return theme;
        return "dark"; // default value
    };

    const setTheme = (theme: string) => {
        document.body.classList.remove("light", "dark");
        document.body.classList.add(theme);
        localStorage.setItem("theme", theme);
    };

    const updateThemeButtonIcon = (theme: string) => {
        const themeToggleButton = document.getElementById("theme-toggle");

        if (themeToggleButton) {
            if (theme === "dark") {
                themeToggleButton.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="1rem" height="1rem" viewBox="0 0 24 24">
	            <path fill="currentColor" d="M12 1.992a10 10 0 1 0 9.236 13.838c.341-.82-.476-1.644-1.298-1.31a6.5 6.5 0 0 1-6.864-10.787l.077-.08c.551-.63.113-1.653-.758-1.653h-.266l-.068-.006z" />
                </svg>`;
            } else {
                themeToggleButton.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="1rem" height="1rem" viewBox="0 0 24 24">
	            <path fill="currentColor" d="M12 19a1 1 0 0 1 .993.883L13 20v1a1 1 0 0 1-1.993.117L11 21v-1a1 1 0 0 1 1-1m6.313-2.09l.094.083l.7.7a1 1 0 0 1-1.32 1.497l-.094-.083l-.7-.7a1 1 0 0 1 1.218-1.567zm-11.306.083a1 1 0 0 1 .083 1.32l-.083.094l-.7.7a1 1 0 0 1-1.497-1.32l.083-.094l.7-.7a1 1 0 0 1 1.414 0M4 11a1 1 0 0 1 .117 1.993L4 13H3a1 1 0 0 1-.117-1.993L3 11zm17 0a1 1 0 0 1 .117 1.993L21 13h-1a1 1 0 0 1-.117-1.993L20 11zM6.213 4.81l.094.083l.7.7a1 1 0 0 1-1.32 1.497l-.094-.083l-.7-.7A1 1 0 0 1 6.11 4.74zm12.894.083a1 1 0 0 1 .083 1.32l-.083.094l-.7.7a1 1 0 0 1-1.497-1.32l.083-.094l.7-.7a1 1 0 0 1 1.414 0M12 2a1 1 0 0 1 .993.883L13 3v1a1 1 0 0 1-1.993.117L11 4V3a1 1 0 0 1 1-1m0 5a5 5 0 1 1-4.995 5.217L7 12l.005-.217A5 5 0 0 1 12 7" />
                </svg>`;
            }
        }
    };

    document.addEventListener("DOMContentLoaded", () => {
        // ---- Toggle theme
        const currentTheme = getThemePreference();
        setTheme(currentTheme);
        updateThemeButtonIcon(currentTheme);

        const toggleButton = document.getElementById("theme-toggle");
        if (toggleButton) {
            toggleButton.addEventListener("click", () => {
                const currentTheme = document.body.classList.contains("dark")
                    ? "light"
                    : "dark";
                setTheme(currentTheme);
                updateThemeButtonIcon(currentTheme);
            });
        }

        // ---- Animated navbar colors
        const sections = document.querySelectorAll("section[id]");
        const navItems = document.querySelectorAll(".nav-item");

        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    const navItem = document.querySelector(
                        `#nav-${entry.target.id}`,
                    );
                    if (entry.isIntersecting && navItem) {
                        navItems.forEach((item) =>
                            item.classList.remove("active"),
                        );
                        navItem.classList.add("active");
                    }
                });
            },
            { threshold: 0.6 },
        );

        sections.forEach((section) => observer.observe(section));
    });
</script>
